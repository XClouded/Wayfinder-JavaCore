/*******************************************************************************
 * Copyright (c) 1999-2010, Vodafone Group Services
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met:
 * 
 *     * Redistributions of source code must retain the above copyright 
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above 
 *       copyright notice, this list of conditions and the following 
 *       disclaimer in the documentation and/or other materials provided 
 *       with the distribution.
 *     * Neither the name of Vodafone Group Services nor the names of its 
 *       contributors may be used to endorse or promote products derived 
 *       from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE 
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
 * OF SUCH DAMAGE.
 ******************************************************************************/
/*
 *    Copyright, Wayfinder Systems AB, 2009
 */
package com.wayfinder.core.shared.util;

import junit.framework.TestCase;

/**
 * 
 *
 */
public class WFBase64Test extends TestCase {

    /**
     * @param name
     */
    public WFBase64Test(String name) {
        super(name);
    }

    /* (non-Javadoc)
     * @see junit.framework.TestCase#setUp()
     */
    protected void setUp() throws Exception {
        super.setUp();
    }

    /* (non-Javadoc)
     * @see junit.framework.TestCase#tearDown()
     */
    protected void tearDown() throws Exception {
        super.tearDown();
    }

    /**
     * Test method for {@link com.wayfinder.core.shared.util.WFBase64#decode(byte[])}.
     */
    public void testDecode() {
        /* using test vectors from RFC 4648 http://tools.ietf.org/html/rfc4648#section-10
         * 
         * BASE64("") = "" 
         * BASE64("f") = "Zg==" 
         * BASE64("fo") = "Zm8=" 
         * BASE64("foo") = "Zm9v" 
         * BASE64("foob") = "Zm9vYg==" 
         * BASE64("fooba") = "Zm9vYmE=" 
         * BASE64("foobar") = "Zm9vYmFy"
         */
        
        assertEquals("foobar", new String(WFBase64.decode("Zm9vYmFy".getBytes())));
        assertEquals("bar", new String(WFBase64.decode("Zm9vYmFy".getBytes(), 4, 4)));
        
        // test with and without padding
        assertEquals("fooba", new String(WFBase64.decode("Zm9vYmE=".getBytes())));
        assertEquals("fooba", new String(WFBase64.decode("Zm9vYmE".getBytes())));
        
        // test with and without padding
        assertEquals("foob", new String(WFBase64.decode("Zm9vYg==".getBytes())));        
        assertEquals("foob", new String(WFBase64.decode("Zm9vYg".getBytes())));
        
        assertEquals("foo", new String(WFBase64.decode("Zm9v".getBytes())));
        
        // test with and without padding
        assertEquals("fo", new String(WFBase64.decode("Zm8=".getBytes())));
        assertEquals("fo", new String(WFBase64.decode("Zm8".getBytes())));

        // test with and without padding
        assertEquals("f", new String(WFBase64.decode("Zg==".getBytes())));
        assertEquals("f", new String(WFBase64.decode("Zg".getBytes())));
                
        assertEquals("", new String(WFBase64.decode("".getBytes())));
                
        byte[] m_lookupTable = new byte[] {
                // category_id: 305419896, offset: 0x6
                0x12, 0x34, 0x56, 0x78, 0x0, 0x0, 0x0, 0x6, 
        };
        byte[] result = WFBase64.decode("EjRWeAAAAAY".getBytes());
        assertEquals(m_lookupTable.length, result.length);
        for (int i = 0; i < m_lookupTable.length; i++) {
            assertEquals(m_lookupTable[i], result[i]);
        }
        
        byte[] m_stringTable = new byte[] {
                // ""@0x2 (offset of first char)
                0x0, 0x0, 0x0, 
        };
        result = WFBase64.decode("AAAA".getBytes());
        assertEquals(m_stringTable.length, result.length);
        for (int i = 0; i < m_stringTable.length; i++) {
            assertEquals(m_stringTable[i], result[i]);
        }
        
        byte[] m_categoryTable = new byte[] {
                // 1 top level categories as offsets
                0x0, 0x1, 0x0, 0x0, 0x0, 0x6, 
                // offset: 0x6 id: 305419896 name: ""@0x2 imageName: ""@0x2  0 sub categories by ID: 
                0x12, 0x34, 0x56, 0x78, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0
        };
        result = WFBase64.decode("AAEAAAAGEjRWeAAAAAIAAAACAAA=".getBytes());
        assertEquals(m_categoryTable.length,result.length);
        for (int i = 0; i < m_categoryTable.length; i++) {
            assertEquals(m_categoryTable[i], result[i]);
        }
    }
    
    public void testExceptions() {
        try {
            WFBase64.decode((byte[])null, 0, 0);
            fail("Should have thrown NPE!");
        }
        catch (NullPointerException e) {
            //ok
        }
        
        try {   
            WFBase64.decode("Zm9vYmFy".getBytes(), -1, 8);
            fail("Should have failed, offset < 0");
        }
        catch (IndexOutOfBoundsException e) {
            //ok
        }
        
        try {    
            WFBase64.decode("Zm9vYmFy".getBytes(), 9, 8);
            fail("Should have failed, offset > array length");
        }
        catch (IndexOutOfBoundsException e) {
            //ok
        }
        
        try {
            WFBase64.decode("Zm9vYmFy".getBytes(),  -1, -1);
            fail("Should have failed, offset + len < 0 and len < 0");
        }
        catch (IndexOutOfBoundsException e) {
            //ok
        }
        
        try {
            WFBase64.decode("Zm9vYmFy".getBytes(), 5, 8);
            fail("Should have failed, offset + len > array legth");
        }
        catch (IndexOutOfBoundsException e) {
            //ok
        }
        
        try {
            byte[] result = new byte[5];
            WFBase64.decodeTo("Zm9vYmFy".getBytes(), 0, 8, result, 0, 5);
            fail("Should have failed, the destination buffer cannot fit the decoded data");
        }
        catch (ArrayStoreException e) {
            //ok
        }
    }
    
    public void testEncode() {
        byte[] m_categoryTable = new byte[] {
                // 1 top level categories as offsets
                0x0, 0x1, 0x0, 0x0, 0x0, 0x6, 

                // offset: 0x6 id: 305419896 name: ""@0x2 imageName: ""@0x2  0 sub categories by ID: 
                0x12, 0x34, 0x56, 0x78, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 

        };
        String str = WFBase64.encode(m_categoryTable);
        assertEquals("AAEAAAAGEjRWeAAAAAIAAAACAAA=", str);
        
        m_categoryTable = new byte[] {
            // 14 top level categories as offsets
            0x0, 0xE, 0x0, 0x0, 0x0, 0x3A, 0x0, 0x0, 0x0, 0x48, 0x0, 0x0, 0x0, 0x56, 0x0, 0x0, 0x0, 0x64, 0x0, 0x0, 0x0, 0x72, 0x0, 0x0, 0x0, (byte) 0x80, 0x0, 0x0, 0x0, (byte) 0x9E, 0x0, 0x0, 0x0, (byte) 0xBC, 0x0, 0x0, 0x0, (byte) 0xD2, 0x0, 0x0, 0x0, (byte) 0xE0, 0x0, 0x0, 0x0, (byte) 0xEE, 0x0, 0x0, 0x1, 0x10, 0x0, 0x0, 0x1, 0x5E, 0x0, 0x0, 0x1, (byte) 0xA0, 

            // offset: 0x3A id: 18 name: "Airports"@0x2 imageName: "cat_vf_airport"@0xD  0 sub categories by ID: 
            0x0, 0x0, 0x0, 0x12, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0xD, 0x0, 0x0, 

            // offset: 0x48 id: 272 name: "ATMs & Banks"@0x1E imageName: "cat_vf_atm"@0x2D  0 sub categories by ID: 
            0x0, 0x0, 0x1, 0x10, 0x0, 0x0, 0x0, 0x1E, 0x0, 0x0, 0x0, 0x2D, 0x0, 0x0, 

            // offset: 0x56 id: 86 name: "Cafe"@0x3A imageName: "cat_vf_cafe"@0x41  0 sub categories by ID: 
            0x0, 0x0, 0x0, 0x56, 0x0, 0x0, 0x0, 0x3A, 0x0, 0x0, 0x0, 0x41, 0x0, 0x0, 

            // offset: 0x64 id: 98 name: "Cinemas"@0x4F imageName: "cat_vf_cinema"@0x59  0 sub categories by ID: 
            0x0, 0x0, 0x0, 0x62, 0x0, 0x0, 0x0, 0x4F, 0x0, 0x0, 0x0, 0x59, 0x0, 0x0, 

            // offset: 0x72 id: 118 name: "Hotels"@0x69 imageName: "cat_vf_hotel"@0x72  0 sub categories by ID: 
            0x0, 0x0, 0x0, 0x76, 0x0, 0x0, 0x0, 0x69, 0x0, 0x0, 0x0, 0x72, 0x0, 0x0, 

            // offset: 0x80 id: 111 name: "Health & Medical"@0x81 imageName: "cat_vf_hospital"@0x94  4 sub categories by ID: 249 248 246 245 
            0x0, 0x0, 0x0, 0x6F, 0x0, 0x0, 0x0, (byte) 0x81, 0x0, 0x0, 0x0, (byte) 0x94, 0x0, 0x4, 0x0, 0x0, 0x1, (byte) 0xAE, 0x0, 0x0, 0x1, (byte) 0xBC, 0x0, 0x0, 0x1, (byte) 0xCA, 0x0, 0x0, 0x1, (byte) 0xD8, 

            // offset: 0x9E id: 278 name: "Nightlife"@0xA6 imageName: "cat_vf_nightlife"@0xB2  4 sub categories by ID: 100 99 232 90 
            0x0, 0x0, 0x1, 0x16, 0x0, 0x0, 0x0, (byte) 0xA6, 0x0, 0x0, 0x0, (byte) 0xB2, 0x0, 0x4, 0x0, 0x0, 0x1, (byte) 0xE6, 0x0, 0x0, 0x1, (byte) 0xF4, 0x0, 0x0, 0x2, 0x2, 0x0, 0x0, 0x2, 0x10, 

            // offset: 0xBC id: 267 name: "Parking"@0xC5 imageName: "cat_vf_openparkingarea"@0xCF  2 sub categories by ID: 237 236 
            0x0, 0x0, 0x1, 0xB, 0x0, 0x0, 0x0, (byte) 0xC5, 0x0, 0x0, 0x0, (byte) 0xCF, 0x0, 0x2, 0x0, 0x0, 0x2, 0x1E, 0x0, 0x0, 0x2, 0x2C, 

            // offset: 0xD2 id: 103 name: "Petrol stations"@0xE8 imageName: "cat_vf_petrolstation"@0xFA  0 sub categories by ID: 
            0x0, 0x0, 0x0, 0x67, 0x0, 0x0, 0x0, (byte) 0xE8, 0x0, 0x0, 0x0, (byte) 0xFA, 0x0, 0x0, 

            // offset: 0xE0 id: 107 name: "Post office"@0x111 imageName: "cat_vf_postoffice"@0x11F  0 sub categories by ID: 
            0x0, 0x0, 0x0, 0x6B, 0x0, 0x0, 0x1, 0x11, 0x0, 0x0, 0x1, 0x1F, 0x0, 0x0, 

            // offset: 0xEE id: 5 name: "Public transportation"@0x133 imageName: ""@0x14B  5 sub categories by ID: 126 123 122 121 124 
            0x0, 0x0, 0x0, 0x5, 0x0, 0x0, 0x1, 0x33, 0x0, 0x0, 0x1, 0x4B, 0x0, 0x5, 0x0, 0x0, 0x2, 0x3A, 0x0, 0x0, 0x2, 0x48, 0x0, 0x0, 0x2, 0x56, 0x0, 0x0, 0x2, 0x64, 0x0, 0x0, 0x2, 0x72, 

            // offset: 0x110 id: 85 name: "Restaurants"@0x14E imageName: "cat_vf_restaurant"@0x15C  16 sub categories by ID: 216 214 208 202 198 196 195 192 190 189 175 168 165 164 159 158 
            0x0, 0x0, 0x0, 0x55, 0x0, 0x0, 0x1, 0x4E, 0x0, 0x0, 0x1, 0x5C, 0x0, 0x10, 0x0, 0x0, 0x2, (byte) 0x80, 0x0, 0x0, 0x2, (byte) 0x8E, 0x0, 0x0, 0x2, (byte) 0x9C, 0x0, 0x0, 0x2, (byte) 0xAA, 0x0, 0x0, 0x2, (byte) 0xB8, 0x0, 0x0, 0x2, (byte) 0xC6, 0x0, 0x0, 0x2, (byte) 0xD4, 0x0, 0x0, 0x2, (byte) 0xE2, 0x0, 0x0, 0x2, (byte) 0xF0, 0x0, 0x0, 0x2, (byte) 0xFE, 0x0, 0x0, 0x3, 0xC, 0x0, 0x0, 0x3, 0x1A, 0x0, 0x0, 0x3, 0x28, 0x0, 0x0, 0x3, 0x36, 0x0, 0x0, 0x3, 0x44, 0x0, 0x0, 0x3, 0x52, 

            // offset: 0x15E id: 9 name: "Shopping"@0x170 imageName: "cat_vf_grocerystore"@0x17B  13 sub categories by ID: 77 75 74 70 69 68 67 64 62 61 59 58 56 
            0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x1, 0x70, 0x0, 0x0, 0x1, 0x7B, 0x0, 0xD, 0x0, 0x0, 0x3, 0x60, 0x0, 0x0, 0x3, 0x6E, 0x0, 0x0, 0x3, 0x7C, 0x0, 0x0, 0x3, (byte) 0x8A, 0x0, 0x0, 0x3, (byte) 0x98, 0x0, 0x0, 0x3, (byte) 0xA6, 0x0, 0x0, 0x3, (byte) 0xB4, 0x0, 0x0, 0x3, (byte) 0xC2, 0x0, 0x0, 0x3, (byte) 0xD0, 0x0, 0x0, 0x3, (byte) 0xDE, 0x0, 0x0, 0x3, (byte) 0xEC, 0x0, 0x0, 0x3, (byte) 0xFA, 0x0, 0x0, 0x4, 0x8, 

            // offset: 0x1A0 id: 10003 name: "Vodafone stores"@0x191 imageName: "cat_vf_vodafoneshop"@0x1A3  0 sub categories by ID: 
            0x0, 0x0, 0x27, 0x13, 0x0, 0x0, 0x1, (byte) 0x91, 0x0, 0x0, 0x1, (byte) 0xA3, 0x0, 0x0, 

            // offset: 0x1AE id: 249 name: "Dentist"@0x1B9 imageName: ""@0x14B  0 sub categories by ID: 
            0x0, 0x0, 0x0, (byte) 0xF9, 0x0, 0x0, 0x1, (byte) 0xB9, 0x0, 0x0, 0x1, 0x4B, 0x0, 0x0, 

            // offset: 0x1BC id: 248 name: "Doctor"@0x1C3 imageName: ""@0x14B  0 sub categories by ID: 
            0x0, 0x0, 0x0, (byte) 0xF8, 0x0, 0x0, 0x1, (byte) 0xC3, 0x0, 0x0, 0x1, 0x4B, 0x0, 0x0, 

            // offset: 0x1CA id: 246 name: "Hospital"@0x1CC imageName: "cat_vf_hospital"@0x94  0 sub categories by ID: 
            0x0, 0x0, 0x0, (byte) 0xF6, 0x0, 0x0, 0x1, (byte) 0xCC, 0x0, 0x0, 0x0, (byte) 0x94, 0x0, 0x0, 

            // offset: 0x1D8 id: 245 name: "Pharmacy"@0x1D7 imageName: "cat_vf_pharmacy"@0x1E2  0 sub categories by ID: 
            0x0, 0x0, 0x0, (byte) 0xF5, 0x0, 0x0, 0x1, (byte) 0xD7, 0x0, 0x0, 0x1, (byte) 0xE2, 0x0, 0x0, 

            // offset: 0x1E6 id: 100 name: "Bars"@0x1F4 imageName: ""@0x14B  0 sub categories by ID: 
            0x0, 0x0, 0x0, 0x64, 0x0, 0x0, 0x1, (byte) 0xF4, 0x0, 0x0, 0x1, 0x4B, 0x0, 0x0, 

            // offset: 0x1F4 id: 99 name: "Casinos"@0x1FB imageName: "cat_vf_casino"@0x205  0 sub categories by ID: 
            0x0, 0x0, 0x0, 0x63, 0x0, 0x0, 0x1, (byte) 0xFB, 0x0, 0x0, 0x2, 0x5, 0x0, 0x0, 

            // offset: 0x202 id: 232 name: "Pubs"@0x215 imageName: ""@0x14B  0 sub categories by ID: 
            0x0, 0x0, 0x0, (byte) 0xE8, 0x0, 0x0, 0x2, 0x15, 0x0, 0x0, 0x1, 0x4B, 0x0, 0x0, 

            // offset: 0x210 id: 90 name: "Night club"@0x21C imageName: ""@0x14B  0 sub categories by ID: 
            0x0, 0x0, 0x0, 0x5A, 0x0, 0x0, 0x2, 0x1C, 0x0, 0x0, 0x1, 0x4B, 0x0, 0x0, 

            // offset: 0x21E id: 237 name: "Open parking area"@0x229 imageName: "cat_vf_openparkingarea"@0xCF  0 sub categories by ID: 
            0x0, 0x0, 0x0, (byte) 0xED, 0x0, 0x0, 0x2, 0x29, 0x0, 0x0, 0x0, (byte) 0xCF, 0x0, 0x0, 

            // offset: 0x22C id: 236 name: "Parking garage"@0x23D imageName: "cat_vf_openparkingarea"@0xCF  0 sub categories by ID: 
            0x0, 0x0, 0x0, (byte) 0xEC, 0x0, 0x0, 0x2, 0x3D, 0x0, 0x0, 0x0, (byte) 0xCF, 0x0, 0x0, 

            // offset: 0x23A id: 126 name: "Bus station"@0x24E imageName: "cat_vf_busstation"@0x25C  0 sub categories by ID: 
            0x0, 0x0, 0x0, 0x7E, 0x0, 0x0, 0x2, 0x4E, 0x0, 0x0, 0x2, 0x5C, 0x0, 0x0, 

            // offset: 0x248 id: 123 name: "Commuter rail station"@0x270 imageName: "cat_vf_commuter_rail_station"@0x288  0 sub categories by ID: 
            0x0, 0x0, 0x0, 0x7B, 0x0, 0x0, 0x2, 0x70, 0x0, 0x0, 0x2, (byte) 0x88, 0x0, 0x0, 

            // offset: 0x256 id: 122 name: "Railway station"@0x2A7 imageName: "cat_vf_railwaystation"@0x2B9  0 sub categories by ID: 
            0x0, 0x0, 0x0, 0x7A, 0x0, 0x0, 0x2, (byte) 0xA7, 0x0, 0x0, 0x2, (byte) 0xB9, 0x0, 0x0, 

            // offset: 0x264 id: 121 name: "Subway"@0x2D1 imageName: "cat_vf_subway_station"@0x2DA  0 sub categories by ID: 
            0x0, 0x0, 0x0, 0x79, 0x0, 0x0, 0x2, (byte) 0xD1, 0x0, 0x0, 0x2, (byte) 0xDA, 0x0, 0x0, 

            // offset: 0x272 id: 124 name: "Tram stop"@0x2F2 imageName: "cat_vf_tramway"@0x2FE  0 sub categories by ID: 
            0x0, 0x0, 0x0, 0x7C, 0x0, 0x0, 0x2, (byte) 0xF2, 0x0, 0x0, 0x2, (byte) 0xFE, 0x0, 0x0, 

            // offset: 0x280 id: 216 name: "Bistro"@0x30F imageName: ""@0x14B  0 sub categories by ID: 
            0x0, 0x0, 0x0, (byte) 0xD8, 0x0, 0x0, 0x3, 0xF, 0x0, 0x0, 0x1, 0x4B, 0x0, 0x0, 

            // offset: 0x28E id: 214 name: "British kitchen"@0x318 imageName: ""@0x14B  0 sub categories by ID: 
            0x0, 0x0, 0x0, (byte) 0xD6, 0x0, 0x0, 0x3, 0x18, 0x0, 0x0, 0x1, 0x4B, 0x0, 0x0, 

            // offset: 0x29C id: 208 name: "Chinese kitchen"@0x32A imageName: ""@0x14B  0 sub categories by ID: 
            0x0, 0x0, 0x0, (byte) 0xD0, 0x0, 0x0, 0x3, 0x2A, 0x0, 0x0, 0x1, 0x4B, 0x0, 0x0, 

            // offset: 0x2AA id: 202 name: "Fast food"@0x33C imageName: ""@0x14B  0 sub categories by ID: 
            0x0, 0x0, 0x0, (byte) 0xCA, 0x0, 0x0, 0x3, 0x3C, 0x0, 0x0, 0x1, 0x4B, 0x0, 0x0, 

            // offset: 0x2B8 id: 198 name: "French kitchen"@0x348 imageName: ""@0x14B  0 sub categories by ID: 
            0x0, 0x0, 0x0, (byte) 0xC6, 0x0, 0x0, 0x3, 0x48, 0x0, 0x0, 0x1, 0x4B, 0x0, 0x0, 

            // offset: 0x2C6 id: 196 name: "Greek kitchen"@0x359 imageName: ""@0x14B  0 sub categories by ID: 
            0x0, 0x0, 0x0, (byte) 0xC4, 0x0, 0x0, 0x3, 0x59, 0x0, 0x0, 0x1, 0x4B, 0x0, 0x0, 

            // offset: 0x2D4 id: 195 name: "Grill"@0x369 imageName: ""@0x14B  0 sub categories by ID: 
            0x0, 0x0, 0x0, (byte) 0xC3, 0x0, 0x0, 0x3, 0x69, 0x0, 0x0, 0x1, 0x4B, 0x0, 0x0, 

            // offset: 0x2E2 id: 192 name: "Indian kitchen"@0x371 imageName: ""@0x14B  0 sub categories by ID: 
            0x0, 0x0, 0x0, (byte) 0xC0, 0x0, 0x0, 0x3, 0x71, 0x0, 0x0, 0x1, 0x4B, 0x0, 0x0, 

            // offset: 0x2F0 id: 190 name: "Italian kitchen"@0x382 imageName: ""@0x14B  0 sub categories by ID: 
            0x0, 0x0, 0x0, (byte) 0xBE, 0x0, 0x0, 0x3, (byte) 0x82, 0x0, 0x0, 0x1, 0x4B, 0x0, 0x0, 

            // offset: 0x2FE id: 189 name: "Japanese kitchen"@0x394 imageName: ""@0x14B  0 sub categories by ID: 
            0x0, 0x0, 0x0, (byte) 0xBD, 0x0, 0x0, 0x3, (byte) 0x94, 0x0, 0x0, 0x1, 0x4B, 0x0, 0x0, 

            // offset: 0x30C id: 175 name: "Pizzeria"@0x3A7 imageName: ""@0x14B  0 sub categories by ID: 
            0x0, 0x0, 0x0, (byte) 0xAF, 0x0, 0x0, 0x3, (byte) 0xA7, 0x0, 0x0, 0x1, 0x4B, 0x0, 0x0, 

            // offset: 0x31A id: 168 name: "Sea food"@0x3B2 imageName: ""@0x14B  0 sub categories by ID: 
            0x0, 0x0, 0x0, (byte) 0xA8, 0x0, 0x0, 0x3, (byte) 0xB2, 0x0, 0x0, 0x1, 0x4B, 0x0, 0x0, 

            // offset: 0x328 id: 165 name: "Spanish kitchen"@0x3BD imageName: ""@0x14B  0 sub categories by ID: 
            0x0, 0x0, 0x0, (byte) 0xA5, 0x0, 0x0, 0x3, (byte) 0xBD, 0x0, 0x0, 0x1, 0x4B, 0x0, 0x0, 

            // offset: 0x336 id: 164 name: "Steak house"@0x3CF imageName: ""@0x14B  0 sub categories by ID: 
            0x0, 0x0, 0x0, (byte) 0xA4, 0x0, 0x0, 0x3, (byte) 0xCF, 0x0, 0x0, 0x1, 0x4B, 0x0, 0x0, 

            // offset: 0x344 id: 159 name: "Thai kitchen"@0x3DD imageName: ""@0x14B  0 sub categories by ID: 
            0x0, 0x0, 0x0, (byte) 0x9F, 0x0, 0x0, 0x3, (byte) 0xDD, 0x0, 0x0, 0x1, 0x4B, 0x0, 0x0, 

            // offset: 0x352 id: 158 name: "Turkish kitchen"@0x3EC imageName: ""@0x14B  0 sub categories by ID: 
            0x0, 0x0, 0x0, (byte) 0x9E, 0x0, 0x0, 0x3, (byte) 0xEC, 0x0, 0x0, 0x1, 0x4B, 0x0, 0x0, 

            // offset: 0x360 id: 77 name: "Bookshops"@0x3FE imageName: ""@0x14B  0 sub categories by ID: 
            0x0, 0x0, 0x0, 0x4D, 0x0, 0x0, 0x3, (byte) 0xFE, 0x0, 0x0, 0x1, 0x4B, 0x0, 0x0, 

            // offset: 0x36E id: 75 name: "Clothing and accessories"@0x40A imageName: ""@0x14B  0 sub categories by ID: 
            0x0, 0x0, 0x0, 0x4B, 0x0, 0x0, 0x4, 0xA, 0x0, 0x0, 0x1, 0x4B, 0x0, 0x0, 

            // offset: 0x37C id: 74 name: "Convenience stores"@0x425 imageName: ""@0x14B  0 sub categories by ID: 
            0x0, 0x0, 0x0, 0x4A, 0x0, 0x0, 0x4, 0x25, 0x0, 0x0, 0x1, 0x4B, 0x0, 0x0, 

            // offset: 0x38A id: 70 name: "Florists"@0x43A imageName: ""@0x14B  0 sub categories by ID: 
            0x0, 0x0, 0x0, 0x46, 0x0, 0x0, 0x4, 0x3A, 0x0, 0x0, 0x1, 0x4B, 0x0, 0x0, 

            // offset: 0x398 id: 69 name: "Food and drink shop"@0x445 imageName: ""@0x14B  0 sub categories by ID: 
            0x0, 0x0, 0x0, 0x45, 0x0, 0x0, 0x4, 0x45, 0x0, 0x0, 0x1, 0x4B, 0x0, 0x0, 

            // offset: 0x3A6 id: 68 name: "Gifts and souvenirs"@0x45B imageName: ""@0x14B  0 sub categories by ID: 
            0x0, 0x0, 0x0, 0x44, 0x0, 0x0, 0x4, 0x5B, 0x0, 0x0, 0x1, 0x4B, 0x0, 0x0, 

            // offset: 0x3B4 id: 67 name: "Grocery store"@0x471 imageName: "cat_vf_grocerystore"@0x17B  0 sub categories by ID: 
            0x0, 0x0, 0x0, 0x43, 0x0, 0x0, 0x4, 0x71, 0x0, 0x0, 0x1, 0x7B, 0x0, 0x0, 

            // offset: 0x3C2 id: 64 name: "Jewelry clocks and watches"@0x481 imageName: ""@0x14B  0 sub categories by ID: 
            0x0, 0x0, 0x0, 0x40, 0x0, 0x0, 0x4, (byte) 0x81, 0x0, 0x0, 0x1, 0x4B, 0x0, 0x0, 

            // offset: 0x3D0 id: 62 name: "Newsagents and tobacconists"@0x49E imageName: ""@0x14B  0 sub categories by ID: 
            0x0, 0x0, 0x0, 0x3E, 0x0, 0x0, 0x4, (byte) 0x9E, 0x0, 0x0, 0x1, 0x4B, 0x0, 0x0, 

            // offset: 0x3DE id: 61 name: "Opticians"@0x4BC imageName: ""@0x14B  0 sub categories by ID: 
            0x0, 0x0, 0x0, 0x3D, 0x0, 0x0, 0x4, (byte) 0xBC, 0x0, 0x0, 0x1, 0x4B, 0x0, 0x0, 

            // offset: 0x3EC id: 59 name: "Shopping centre"@0x4C8 imageName: ""@0x14B  0 sub categories by ID: 
            0x0, 0x0, 0x0, 0x3B, 0x0, 0x0, 0x4, (byte) 0xC8, 0x0, 0x0, 0x1, 0x4B, 0x0, 0x0, 

            // offset: 0x3FA id: 58 name: "Sports equipment and clothing"@0x4DA imageName: ""@0x14B  0 sub categories by ID: 
            0x0, 0x0, 0x0, 0x3A, 0x0, 0x0, 0x4, (byte) 0xDA, 0x0, 0x0, 0x1, 0x4B, 0x0, 0x0, 

            // offset: 0x408 id: 56 name: "Toys and games"@0x4FA imageName: ""@0x14B  0 sub categories by ID: 
            0x0, 0x0, 0x0, 0x38, 0x0, 0x0, 0x4, (byte) 0xFA, 0x0, 0x0, 0x1, 0x4B, 0x0, 0x0, 

        };


        String encStr = WFBase64.encode(m_categoryTable);
        byte[] decBytes = WFBase64.decode(encStr.getBytes());
        assertEquals(m_categoryTable.length, decBytes.length);
        for (int i = 0; i < m_categoryTable.length; i++) {
            assertEquals(m_categoryTable[i], decBytes[i]);
        }
    }
    
    /**
     * Test method for {@link com.wayfinder.core.shared.util.WFBase64#decode(byte[])}.
     */
    public void testCharDecode() {
        /* using test vectors from RFC 4648 http://tools.ietf.org/html/rfc4648#section-10
         * 
         * BASE64("") = "" 
         * BASE64("f") = "Zg==" 
         * BASE64("fo") = "Zm8=" 
         * BASE64("foo") = "Zm9v" 
         * BASE64("foob") = "Zm9vYg==" 
         * BASE64("fooba") = "Zm9vYmE=" 
         * BASE64("foobar") = "Zm9vYmFy"
         */
        
        assertEquals("foobar", new String(WFBase64.decode("Zm9vYmFy")));
        assertEquals("bar", new String(WFBase64.decode("Zm9vYmFy".toCharArray(), 4, 4)));
        
        // test with and without padding
        assertEquals("fooba", new String(WFBase64.decode("Zm9vYmE=")));
        assertEquals("fooba", new String(WFBase64.decode("Zm9vYmE")));
        
        // test with and without padding
        assertEquals("foob", new String(WFBase64.decode("Zm9vYg==".toCharArray())));        
        assertEquals("foob", new String(WFBase64.decode("Zm9vYg".toCharArray())));
        
        assertEquals("foo", new String(WFBase64.decode("Zm9v")));
        
        // test with and without padding
        assertEquals("fo", new String(WFBase64.decode("Zm8=")));
        assertEquals("fo", new String(WFBase64.decode("Zm8")));

        // test with and without padding
        assertEquals("f", new String(WFBase64.decode("Zg==")));
        assertEquals("f", new String(WFBase64.decode("Zg")));
                
        assertEquals("", new String(WFBase64.decode("")));
                
        byte[] m_lookupTable = new byte[] {
                // category_id: 305419896, offset: 0x6
                0x12, 0x34, 0x56, 0x78, 0x0, 0x0, 0x0, 0x6, 
        };
        byte[] result = WFBase64.decode("EjRWeAAAAAY");
        assertEquals(m_lookupTable.length, result.length);
        for (int i = 0; i < m_lookupTable.length; i++) {
            assertEquals(m_lookupTable[i], result[i]);
        }
        
        byte[] m_stringTable = new byte[] {
                // ""@0x2 (offset of first char)
                0x0, 0x0, 0x0, 
        };
        result = WFBase64.decode("AAAA");
        assertEquals(m_stringTable.length, result.length);
        for (int i = 0; i < m_stringTable.length; i++) {
            assertEquals(m_stringTable[i], result[i]);
        }
        
        byte[] m_categoryTable = new byte[] {
                // 1 top level categories as offsets
                0x0, 0x1, 0x0, 0x0, 0x0, 0x6, 
                // offset: 0x6 id: 305419896 name: ""@0x2 imageName: ""@0x2  0 sub categories by ID: 
                0x12, 0x34, 0x56, 0x78, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0
        };
        result = WFBase64.decode("AAEAAAAGEjRWeAAAAAIAAAACAAA=");
        assertEquals(m_categoryTable.length,result.length);
        for (int i = 0; i < m_categoryTable.length; i++) {
            assertEquals(m_categoryTable[i], result[i]);
        }
    }
}
